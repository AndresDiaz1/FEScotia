[{"/Users/adiaz/Documents/FEScotia/src/index.tsx":"1","/Users/adiaz/Documents/FEScotia/src/serviceWorker.ts":"2","/Users/adiaz/Documents/FEScotia/src/App.tsx":"3","/Users/adiaz/Documents/FEScotia/src/AppConstants.tsx":"4","/Users/adiaz/Documents/FEScotia/src/login/pages/Login.tsx":"5","/Users/adiaz/Documents/FEScotia/src/login/components/inputCustom/InputCustom.tsx":"6"},{"size":430,"mtime":1608779489261,"results":"7","hashOfConfig":"8"},{"size":5154,"mtime":1608779489477,"results":"9","hashOfConfig":"8"},{"size":1161,"mtime":1608779489243,"results":"10","hashOfConfig":"8"},{"size":45,"mtime":1608779489250,"results":"11","hashOfConfig":"8"},{"size":2237,"mtime":1608779978427,"results":"12","hashOfConfig":"8"},{"size":1767,"mtime":1608779526042,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1rlhpqa",{"filePath":"17","messages":"18","errorCount":2,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/adiaz/Documents/FEScotia/src/index.tsx",[],[],"/Users/adiaz/Documents/FEScotia/src/serviceWorker.ts",["30","31","32","33","34","35","36","37","38"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/Users/adiaz/Documents/FEScotia/src/App.tsx",[],"/Users/adiaz/Documents/FEScotia/src/AppConstants.tsx",[],"/Users/adiaz/Documents/FEScotia/src/login/pages/Login.tsx",["39","40"],"import React, { useState } from 'react';\nimport { IonButton, IonContent, IonPage } from '@ionic/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faEyeSlash, faMoneyCheck } from '@fortawesome/free-solid-svg-icons';\nimport './Login.scss';\nimport InputFloatingLabel from '../components/inputCustom/InputCustom';\n\nconst LoginPage: React.FC = () => {\n  const [userName, setUserName] = useState<string>('');\n  const [userPass, setUserPassword] = useState<string>('');\n  const [isPasswordVisible, setPasswordVisibility] = useState<boolean>(false);\n\n  const changeInputType = () => {\n    setPasswordVisibility(!isPasswordVisible);\n  };\n\n  const login = () => {\n    console.log('el usuario', userName);\n    console.log('el pass', userPass);\n  };\n\n  return (\n    <IonPage>\n      <IonContent className=\"login-page ion-padding\">\n        <div className=\"login-page__content\">\n          <div className=\"login-page__image-container\">\n            <FontAwesomeIcon icon={faMoneyCheck} size=\"5x\" color=\"primary\" />\n          </div>\n          <div className=\"login-page__form\">\n            <form>\n              <InputFloatingLabel\n                initialValue={userName}\n                label={'Name'}\n                type={'text'}\n                onChange={({ detail: { value } }) => {\n                  if (value != null) setUserName(value);\n                }}\n                containerClassName={'login-page__input'}\n              />\n              <InputFloatingLabel\n                initialValue={userPass}\n                label={'C.C'}\n                type={isPasswordVisible ? 'text' : 'password'}\n                inputTypeHandler={changeInputType}\n                iconName={isPasswordVisible ? faEyeSlash : faEye}\n                onChange={({ detail: { value } }) => {\n                  if (value != null) setUserPassword(value);\n                }}\n                containerClassName={'ion-margin-top login-page__input'}\n              />\n              <IonButton color=\"scotia-red ion-margin-top\" expand=\"full\" onClick={() => login()}>\n                Log in\n              </IonButton>\n            </form>\n          </div>\n        </div>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default LoginPage;\n","/Users/adiaz/Documents/FEScotia/src/login/components/inputCustom/InputCustom.tsx",["41"],"import React, { useState, useEffect } from 'react';\nimport { IonItem, IonLabel, IonInput } from '@ionic/react';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { InputChangeEventDetail, TextFieldTypes } from './InputCustomTypes';\n\ninterface InputFloatingLabelProps {\n  initialValue?: string;\n  label: string;\n  onChange: (event: CustomEvent<InputChangeEventDetail>) => void;\n  type?: TextFieldTypes;\n  containerClassName?: string;\n  inputTypeHandler?: () => void;\n  iconName?: IconProp;\n}\n\nconst InputFloatingLabel: React.FC<InputFloatingLabelProps> = ({\n  initialValue = '',\n  label,\n  type = 'text',\n  containerClassName = '',\n  onChange,\n  inputTypeHandler,\n  iconName,\n}: InputFloatingLabelProps) => {\n  const [inputValue, setInputValue] = useState(initialValue);\n\n  useEffect(() => {\n    setInputValue(initialValue);\n  }, [initialValue]);\n\n  return (\n    <IonItem className={containerClassName}>\n      {inputTypeHandler ? (\n        <div onClick={inputTypeHandler} className=\"login-page__reveal-password-container\">\n          <FontAwesomeIcon className=\"login-page__reveal-password-icon\" icon={iconName as IconProp} />\n        </div>\n      ) : (\n        ''\n      )}\n      <IonLabel className={inputValue ? '' : 'ion-hide'} position=\"floating\">\n        {label}\n      </IonLabel>\n      <IonInput\n        value={inputValue}\n        type={type}\n        autofocus={true}\n        onIonChange={(event) => {\n          const {\n            detail: { value },\n          } = event;\n          if (value != null) setInputValue(value);\n          onChange(event);\n        }}\n        placeholder={label}\n        name={label}\n      />\n    </IonItem>\n  );\n};\n\nexport default InputFloatingLabel;\n",{"ruleId":"42","severity":2,"message":"43","line":22,"column":16,"nodeType":"44","messageId":"45","endLine":22,"endColumn":55},{"ruleId":"42","severity":2,"message":"43","line":23,"column":15,"nodeType":"44","messageId":"45","endLine":23,"endColumn":54},{"ruleId":"46","severity":1,"message":"47","line":26,"column":8,"nodeType":"48","messageId":"49","endLine":26,"endColumn":42},{"ruleId":"50","severity":1,"message":"51","line":47,"column":11,"nodeType":"52","messageId":"53","endLine":47,"endColumn":22},{"ruleId":"50","severity":1,"message":"51","line":75,"column":15,"nodeType":"52","messageId":"53","endLine":75,"endColumn":26},{"ruleId":"50","severity":1,"message":"51","line":88,"column":15,"nodeType":"52","messageId":"53","endLine":88,"endColumn":26},{"ruleId":"50","severity":1,"message":"51","line":100,"column":7,"nodeType":"52","messageId":"53","endLine":100,"endColumn":20},{"ruleId":"50","severity":1,"message":"51","line":125,"column":7,"nodeType":"52","messageId":"53","endLine":125,"endColumn":18},{"ruleId":"46","severity":1,"message":"47","line":129,"column":8,"nodeType":"48","messageId":"49","endLine":129,"endColumn":29},{"ruleId":"50","severity":1,"message":"51","line":18,"column":5,"nodeType":"52","messageId":"53","endLine":18,"endColumn":16},{"ruleId":"50","severity":1,"message":"51","line":19,"column":5,"nodeType":"52","messageId":"53","endLine":19,"endColumn":16},{"ruleId":"42","severity":2,"message":"54","line":10,"column":14,"nodeType":"44","messageId":"45","endLine":10,"endColumn":56},"no-unused-vars","'registration' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","no-console","Unexpected console statement.","MemberExpression","unexpected","'event' is defined but never used."]